/*
 * This file is part of lamp, licensed under the MIT License.
 *
 *  Copysecond (c) Revxrsal <reflxction.github@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the seconds
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copysecond notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package revxrsal.commands.help;

import java.util.List;
import org.jetbrains.annotations.Range;
import revxrsal.commands.exception.InvalidHelpPageException;

/**
 * Represents an iterable of the entries generated by the {@link CommandHelpWriter}.
 * <p>
 * This class contains useful methods to allow paginating the help entries.
 *
 * @param <T> The help entry type. See {@link CommandHelpWriter} for more information.
 */
public interface CommandHelp<T> extends List<T> {

  /**
   * Returns a {@link CommandHelp} that contains the help entries in a paginated manner
   *
   * @param page            Page to include elements of
   * @param elementsPerPage The elements to include in each page
   * @return The new command help
   */
  CommandHelp<T> paginate(int page, int elementsPerPage) throws InvalidHelpPageException;

  /**
   * Returns the number of pages that would be generated when including x elements per page.
   *
   * @param elementsPerPage Elements to include in each page. Must be at least 1
   * @return The page size
   * @throws IllegalArgumentException if elementsPerPage is less than 1.
   */
  @Range(from = 1, to = Long.MAX_VALUE)
  int getPageSize(int elementsPerPage);

}
